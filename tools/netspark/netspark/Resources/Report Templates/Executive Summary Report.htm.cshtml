@using System
@using System.Collections.Generic
@using System.Drawing
@using System.Globalization
@using System.IO
@using System.Linq
@using System.Text
@using MSL.Common.Extensions
@using MSL.Common.Text
@using MSL.Common.Text.Encoding
@using MSL.Core.Configuration
@using MSL.Core.Entities.Vulnerability
@using MSL.Core.Process.Reporting
@using MSL.Core.Resources
@using MSL.Core.Utilities
@inherits HelperBaseTemplate<ReportTemplateData>
@{
	const int ChartWidth = 760;
	const int ChartHeight = 390;

	var dashUrl = Model.ScanProfile.Uri.AbsoluteUri;
	if (dashUrl.Length > 45)
	{
		dashUrl = dashUrl.Substring(0, 45) + "...";
	}

    // Filter the vuln list and cache it
    var vulnList = ReportingUtility.GetReportableVulnerabilities(Model.Vulnerabilities, Model).ToArray();

	var severitiesCount = new Dictionary<VulnerabilitySeverity, int>
	{
		{ VulnerabilitySeverity.BestPractice, 0 },
		{ VulnerabilitySeverity.Information, 0 },
		{ VulnerabilitySeverity.Low, 0 },
		{ VulnerabilitySeverity.Medium, 0 },
		{ VulnerabilitySeverity.High, 0 },
		{ VulnerabilitySeverity.Critical, 0 },
	};

	foreach (var vuln in vulnList)
	{
		severitiesCount[vuln.Severity] = severitiesCount[vuln.Severity] + 1;
	}

	var impacts = VulnerabilityImpact.GetImpacts(vulnList)
		.OrderByDescending(impact => impact.Severity) // Order impacts first by severity then order
		.ThenBy(impact => impact.Order).ToArray();

	var startTime = ScanSettings.Instance.StartTime.ToLocalTime();
	var timeFormat = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern + " " + CultureInfo.CurrentCulture.DateTimeFormat.LongTimePattern;
	var startTimeInfo = startTime.FormatWithTimeZone(timeFormat, TimeZoneInfo.Local);
}

<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="@ReportingUtility.HtmlLangAtributeValue">
<head>
	<title>@string.Format(Literals.ExecutiveSummaryReport_Title, Decode.Url(Model.ScanProfile.Uri.AbsoluteUri))</title>
	<style type="text/css">
		@Raw(ReportingUtility.GetImagesAsCss("logo.gif"))
		@Raw(ReportingUtility.CreateVulnerabilitySeverityChartAsCss(vulnList, ChartWidth, ChartHeight, "img-severitychart"))
		body {
			margin: 30px;
		}

		p, div, td, h1, h2, h3 {
			font-family: Verdana, Arial, sans-serif;
			font-size: 12px;
		}

		.board {
			background-color: #F7F7F7;
			padding: 10px;
		}

		#netsparker {
			margin-bottom: 20px;
		}

		svg {
				height: 16px;
				width: 16px;
		}

		.flex-svg {
			margin-right: 5px;
		}
		.section-table {
			width: 100%;
			margin-bottom: 50px;
			page-break-inside: avoid;
		}

			.section-table td {
				vertical-align: top;
			}

		#dashboard-table td, #dashboard-table td div {
			font-family: Consolas, Lucida Console, Courier New, Courier, monospace;
			font-size: 17px;
			color: #666;
		}

		.block {
			color: #FFF;
			font-family: Trebuchet MS, Tahoma, sans-serif;
			font-size: 17px;
			color: #FFF;
			padding: 4px 8px 4px 8px;
			margin-bottom: 1px;
		}

		img.severity {
			padding-right: 10px;
		}

		#dashboard-table .td-right {
			padding-left: 5px;
		}

		.dashboard-url {
			color: #000;
		}

		.tdhead {
			background-color: #CCCCCC;
			padding: 2px 5px 2px 5px;
			font-weight: bold;
			text-align: right;
			color: #333333;
		}

		h1, h2, h3, h4 {
			font-size: 32px;
			font-family: Trebuchet MS, Tahoma, sans-serif;
		}

		h1 {
			border-bottom: 6px solid #CCC;
			display: inline;
		}

		.allcaps {
			text-transform: uppercase;
		}

		h2 {
			color: #333;
			font-size: 26px;
			font-weight: normal;
			margin-bottom: 15px;
		}

		h3 {
			color: #666;
			font-size: 20px;
			font-weight: normal;
			margin-bottom: 5px;
		}

		h4 {
			color: #666;
			font-size: 18px;
			font-weight: normal;
			margin-bottom: 5px;
		}

		table {
			border: 0;
			border-collapse: collapse;
			border-spacing: 0;
		}

		li {
			word-wrap: break-word;
		}

		#dashboard-table td {
			padding: 1px;
			margin: 1px;
		}

		#dashboard-table {
			margin-top: 20px;
			border-spacing: 1px;
			border: 1px;
			border-collapse: collapse;
			border-spacing: 0;
		}

		.summary-table {
			margin-top: 15px;
			table-layout: fixed;
			width: 100%;
			page-break-inside: auto;
		}

			.summary-table th {
				border: 1px solid #CCC;
				background-color: #F7F7F7;
				padding: 5px 10px;
				text-align: left;
			}

			.summary-table td {
				border: 1px solid #CCC;
				padding: 5px 10px;
				page-break-inside: avoid;
				word-wrap: break-word;
			}
	</style>
</head>
<body>
	<div style="visibility: hidden; position: absolute; width: 0px; height: 0px;">
			@Raw(ReportingUtility.GetSeverityImages())
	</div>
	<div style="width: 100%">
	<div style="text-align: center;">
		<span class="img-logo"></span>
	</div>
		<table class="section-table">
			<tr>
				<td>
					<h1 class="allcaps">@Literals.ExecutiveSummaryReport_ScanReportSummary</h1>
				</td>
			</tr>
			<tr>
				<td class="board">
					<table id="dashboard-table">
						<tr>
							<td>
								<div class="tdhead">
									@Literals.ReportTemplate_TargetUrl
								</div>
							</td>
							<td class="td-right">
								<span class="dashboard-url">
									<a href="@Decode.Url(Model.ScanProfile.Uri.AbsoluteUri)" title="@Decode.Url(Model.ScanProfile.Uri.AbsoluteUri)">@dashUrl</a>
								</span>
							</td>
						</tr>
						@if (!Model.ScanProfile.AdditionalWebsites.IsNullOrEmpty())
						{
							<tr>
								<td>
									<div class="tdhead">
										@Literals.ReportTemplate_AdditionalWebsites
									</div>
								</td>
								<td>
									@{
										foreach (var additionalWebsite in Model.ScanProfile.AdditionalWebsites)
										{
											var additionalWebsiteUri = Decode.Url(additionalWebsite.TargetUrl);
											<a href="@additionalWebsiteUri">@additionalWebsiteUri</a> @(additionalWebsite.Canonical ? Literals.ReportTemplate_CanonicalWebsite : string.Empty)<br />
										}
									}
								</td>
							</tr>
						}
						<tr>
							<td>
								<div class="tdhead">
									@Literals.ReportTemplate_ScanDate
								</div>
							</td>
							<td class="td-right">
								@startTimeInfo
							</td>
						</tr>
						<tr>
							<td>
								<div class="tdhead">
									@Literals.ReportTemplate_ReportDate
								</div>
							</td>
							<td class="td-right">
								@DateTime.Now.FormatWithTimeZone(timeFormat, TimeZoneInfo.Local)
							</td>
						</tr>
						<tr>
							<td>
								<div class="tdhead">
									@Literals.ReportTemplate_ScanDuration
								</div>
							</td>
							@{
								var elapsedDays = (ScanSettings.Instance.ElapsedTime.Days > 0) ? string.Format(Literals.ReportTemplate_ElapsedDays, ScanSettings.Instance.ElapsedTime.Days) : string.Empty;
								var elapsedTime = elapsedDays + ScanSettings.Instance.ElapsedTime.ToString("hh':'mm':'ss");

								<td class="td-right">@elapsedTime</td>
							}
						</tr>
						<tr>
							<td>
								<div class="tdhead">
									@Literals.ReportTemplate_NetsparkerVersion
								</div>
							</td>
                            <td class="td-right">@ScanSettings.Instance.ProductVersion</td>
						</tr>
					</table>
				</td>
			</tr>
		</table>
		
		@if (vulnList.Length > 0)
		{
			var highestSeverity = severitiesCount.OrderBy(key => key.Key).LastOrDefault(item => item.Value > 0).Key;
			
			if (highestSeverity == 0)
			{
				highestSeverity = VulnerabilitySeverity.Information;
			}
			
			<table class="section-table">
				<tr>
					<td>
						<h1 class="allcaps" style="color: @ColorTranslator.ToHtml(ReportingUtility.SeverityColors[highestSeverity])">@Literals.ResourceManager.GetString("ExecutiveSummaryReport_HighestSeverityTitle_" + highestSeverity)</h1>
					</td>
				</tr>
				<tr>
					<td>
						<p>@Literals.ResourceManager.GetString("ExecutiveSummaryReport_HighestSeverityDesc_" + highestSeverity)</p>
					</td>
				</tr>
			</table>
		}

		@if (impacts.Length > 0)
		{
			var primaryImpact = impacts.First();

			if (!string.IsNullOrWhiteSpace(primaryImpact.Title) || !string.IsNullOrWhiteSpace(primaryImpact.Description))
			{
				<table class="section-table">
					<tr>
						<td>
							<h1 class="allcaps">@Literals.ExecutiveSummaryReport_WhatsWorst</h1>
						</td>
					</tr>
					<tr>
						<td>
							@if (!string.IsNullOrWhiteSpace(primaryImpact.Title))
							{
								<p><strong>@primaryImpact.Title</strong></p>
							}

							@if (!string.IsNullOrWhiteSpace(primaryImpact.Description))
							{
								<p>@primaryImpact.Description</p>
							}
						</td>
					</tr>
				</table>
			}
		}

		@if (vulnList.Length > 0)
		{
			<table class="section-table" style="page-break-before: always;">
				<tr>
					<td>
						<h1 class="allcaps">@Literals.ReportTemplate_VulnerabilityPlural</h1>
					</td>
				</tr>
				<tr>
					<td>
						<div>
							<br />
							<span class="img-severitychart"></span>
						</div>
					</td>
				</tr>
				<tr>
					<td>
						<br/>
						<table class="summary-table">
							<tr>
								<th>@Literals.ReportTemplate_Vulnerability</th>
								<th style="width: 55%;">@Literals.ExecutiveSummaryReport_SuggestedAction</th>
							</tr>
							@foreach (var s in ((VulnerabilitySeverity[])Enum.GetValues(typeof(VulnerabilitySeverity))).Reverse())
							{
								if (severitiesCount[s] > 0)
								{
									var severity = s;
									var vulnTitles = vulnList.Where(x => x.Severity == severity).Select(x => x.Title).Distinct().ToArray();
									foreach (var vulnTitle in vulnTitles)
									{
										<tr>
											<td>
											<div style="display: flex">
												<svg class="flex-svg"><use xmlns:xlink="http://www.w3.org/1999/xlink" href="#Svg-@severity.ToString()"></use></svg>
												
												@vulnTitle
											</div>
											</td>
											@if (vulnTitle == vulnTitles[0])
											{
												<td rowspan="@vulnTitles.Length" style="vertical-align: middle">
													@{
														<strong>@Literals.ResourceManager.GetString("ExecutiveSummaryReport_SuggestedActionTitle_" + s):</strong> @Literals.ResourceManager.GetString("ExecutiveSummaryReport_SuggestedActionDesc_" + s)
													}
												</td>
											}
										</tr>
									}
								}
							}
						</table>
					</td>
				</tr>
			</table>
		}
		else
		{
			<p style="font-size:18px;color:green;text-align:center;border:0;display:block;">@Literals.ExecutiveSummaryReport_NoVulnerabilitiesFound</p>
		}
		
		@if (impacts.Length > 0)
		{
			<table class="section-table">
				<tr>
					<td>
						<h1 class="allcaps">@Literals.ExecutiveSummaryReport_Impacts</h1>
					</td>
				</tr>
				<tr>
					<td>
						<table class="summary-table">
							<tr>
								<th>@Literals.Severity</th>
								<th style="width: 85%;">@Literals.VulnerabilityMaster_Impact</th>
							</tr>
							@foreach (var impact in impacts)
							{
								if (string.IsNullOrWhiteSpace(impact.Title) && string.IsNullOrWhiteSpace(impact.Description))
								{
									continue;
								}

								<tr>
									<td>
										<div style="display: flex">
											<svg class="flex-svg"><use xmlns:xlink="http://www.w3.org/1999/xlink" href="#Svg-@impact.Severity.ToString()"></use></svg>
											@ReportingUtility.GetLocalizedSeverity(impact.Severity)
										</div>
									</td>
									<td>
										@if (!string.IsNullOrWhiteSpace(impact.Title))
										{
											<strong>@impact.Title</strong><br />
										}

										@if (!string.IsNullOrWhiteSpace(impact.Description))
										{
											@impact.Description
										}
									</td>
								</tr>
							}
						</table>
					</td>
				</tr>
			</table>
		}

		@if (vulnList.Length > 0)
		{
			<table class="section-table">
				<tr>
					<td>
						<h1 class="allcaps">@Literals.ExecutiveSummaryReport_ComplianceSummary</h1>
					</td>
				</tr>
				<tr>
					<td>
						<table class="summary-table">
							<tr>
								<th></th>
								<th style="width: 85%;">@Literals.ExecutiveSummaryReport_Vulnerabilities</th>
							</tr>
						    <tr>
						        <td>OWASP 2013</td>
						        <td>@vulnList.Count(x => x.Classification != null && !string.IsNullOrWhiteSpace(x.Classification.Owasp2013Text()))</td>
						    </tr>
						    <tr>
						        <td>OWASP 2017</td>
						        <td>@vulnList.Count(x => x.Classification != null && !string.IsNullOrWhiteSpace(x.Classification.Owasp2017Text()))</td>
						    </tr>
							<tr>
								<td>PCI v3.2</td>
								<td>@vulnList.Count(x => x.Classification != null && !string.IsNullOrWhiteSpace(x.Classification.Pci32Text()))</td>
							</tr>
							<tr>
								<td>HIPAA</td>
								<td>@vulnList.Count(x => x.Classification != null && !string.IsNullOrWhiteSpace(x.Classification.HipaaText()))</td>
							</tr>
						    <tr>
						        <td>ISO 27001</td>
						        <td>@vulnList.Count(x => x.Classification != null && !string.IsNullOrWhiteSpace(x.Classification.Iso27001Text()))</td>
						    </tr>
						</table>

						<p>
							<i>@Literals.ExecutiveSummaryReport_PciExplanation</i>
						</p>
					</td>
				</tr>
			</table>
		}
	</div>
</body>
</html>