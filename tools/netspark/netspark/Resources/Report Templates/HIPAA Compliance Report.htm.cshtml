@using System
@using System.Collections.Generic
@using System.Globalization
@using System.IO
@using System.Linq
@using System.Text
@using MSL.Common.Extensions
@using MSL.Common.Text
@using MSL.Common.Text.Encoding
@using MSL.Core.Configuration
@using MSL.Core.Entities.Cvss
@using MSL.Core.Entities.Vulnerability
@using MSL.Core.Process.Reporting;
@using MSL.Core.Process.Reporting.Cvss
@using MSL.Core.Resources
@using MSL.Core.Utilities
@inherits HelperBaseTemplate<ReportTemplateData>

@{
	const int SourceMaxLength = 20000;
	const int ResponseThreshold = 2000;
	const int ResponseHighlightLimit = 200;

	var totalConfirmed = 0;

	var dashUrl = Model.ScanProfile.Uri.AbsoluteUri;

	if (dashUrl.Length > 45)
	{
		dashUrl = dashUrl.Substring(0, 45) + "...";
	}

	int[] severitiesCount = { 0, 0, 0, 0, 0, 0 };

	var cvssScores = new Dictionary<VulnerabilityType, CvssScore>();

	// Filter the vuln list and cache it
	var vulnList = ReportingUtility.GetReportableVulnerabilities(Model.Vulnerabilities, Model).ToArray();

	var totalIdentified = vulnList.Length;

	var hipaaVulnList = (from IVulnerabilityView v in vulnList
						 where v.Classification != null && !string.IsNullOrEmpty(v.Classification.HipaaText())
						 select v).ToArray();

	var hipaaItemCount = hipaaVulnList.Length;

	foreach (var vuln in hipaaVulnList)
	{
		if (vuln.IsConfirmed)
		{
			totalConfirmed++;
		}
		severitiesCount[(int)vuln.Severity] = severitiesCount[(int)vuln.Severity] + 1;

		cvssScores[vuln.Type] = CvssScoreCalculator.Calculate(vuln.CvssVectorString);
	}

	var startTime = ScanSettings.Instance.StartTime.ToLocalTime();
	var timeFormat = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern + " " + CultureInfo.CurrentCulture.DateTimeFormat.LongTimePattern;
	var startTimeInfo = startTime.FormatWithTimeZone(timeFormat, TimeZoneInfo.Local);
}

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="@ReportingUtility.HtmlLangAtributeValue">
<head>
<title>@string.Format(Literals.HipaaComplianceReport_Title, Decode.Url(Model.ScanProfile.Uri.AbsoluteUri))</title>
<style type="text/css">
    @Raw(ReportingUtility.GetImagesAsCss("logo.gif"))
    body
	{
		margin: 30px;
	}
	p, div, td, h1, h2, h3
	{
		font-family: Verdana, Arial, sans-serif;
		font-size: 12px;
	}
	.board
	{
		background-color: #F7F7F7;
		padding: 10px;
	}
	#netsparker
	{
		margin-bottom: 20px;
	}
	svg{
		height: 16px;
		width: 16px;
	}
    .flex-svg {
        margin-right: 5px;
    }
	.section-table
	{
		width: 100%;
		margin-bottom: 50px;
		page-break-inside: avoid;
	}
	.section-table td
	{
		vertical-align: top;
		page-break-inside: auto;
	}
	#dashboard-table td, #dashboard-table td div, .infobox div.header, .settingson, .settingsoff, #settings-table td, #settings-table td div
	{
		font-family: Consolas, Lucida Console, Courier New, Courier, monospace;
		font-size: 17px;
		color: #666;
	}
	/*
		.left-border
		{
			border-left:5px solid #CCC;
			padding-left:5px
		}
		*/.block
	                                                                                       {
		                                                                                       color: #FFF;
		                                                                                       font-family: Trebuchet MS, Tahoma, sans-serif;
		                                                                                       font-size: 17px;
		                                                                                       color: #FFF;
		                                                                                       padding: 4px 8px 4px 8px;
		                                                                                       margin-bottom: 1px;
	                                                                                       }
	/* Severities */
    .bestpractice
    {
        background-color: #417BB6;
    }
	.information
	{
		background-color: #3399FF;
	}
	.medium
	{
		background-color: #FF9900;
	}
	.critical
	{
		background-color: #F00;
	}
	.high
	{
		background-color: #FF491C;
	}
	.blockconfirmedcritical
	{
		background-color: #C00;
	}
	.blockconfirmedhigh
	{
		background-color: #E82F00;
	}
	.blockconfirmedmedium
	{
		background-color: #DD8500;
	}
	.blockconfirmedlow
	{
		background-color: #D7BD0B;
	}
	.blockconfirmedinformation
	{
		background-color: #007EFD;
	}
    .blockconfirmedbestpractice {
        background-color: #417BB6;
    }
	.low
	{
		background-color: #F3D70C;
	}
	img.severity
	{
		padding-right: 10px;
	}
	#dashboard-table .td-right
	{
		padding-left: 5px;
	}
	.dashboard-url
	{
		color: #000;
	}
	.tdhead
	{
		background-color: #CCCCCC;
		padding: 2px 5px 2px 5px;
		font-weight: bold;
		text-align: right;
		color: #333333;
	}
	h1, h2, h3, h4
	{
		font-size: 32px;
		font-family: Trebuchet MS, Tahoma, sans-serif;
	}
	h1
	{
		border-bottom: 6px solid #CCC;
		display: inline;
	}
	.allcaps
	{
		text-transform: uppercase;
	}
	h2
	{
		color: #333;
		font-size: 26px;
		font-weight: normal;
		margin-bottom: 15px;
	}
	h3
	{
		color: #666;
		font-size: 20px;
		font-weight: normal;
		margin: 5px;
	}
	h4
	{
		color: #666;
		font-size: 18px;
		font-weight: normal;
		margin-bottom: 5px;
	}
	.vuln-table-bottom
	{
		border-bottom: 1px solid #CCC;
		margin-top: 5px;
		margin-bottom: 3px;
	}
	.bord
	{
		border-bottom: 6px solid #CCC;
	}
	table
	{
		border: 0;
		border-collapse: collapse;
		border-spacing: 0;
	}
	li
	{
		word-wrap: break-word;
	}
	#dashboard-table td
	{
		padding: 1px;
		margin: 1px;
	}
	#dashboard-table
	{
		margin-top: 20px;
		border-spacing: 1px;
		border: 1px;
		border-collapse: collapse;
		border-spacing: 0;
	}
	.summary-table
	{
		margin-top: 15px;
		table-layout: fixed;
		width: 100%;
	}
	.summary-table th
	{
		border: 1px solid #CCC;
		background-color: #F7F7F7;
		padding: 5px 10px;
		text-align: left;
	}
	.summary-table td
	{
		border: 1px solid #CCC;
		padding: 5px 10px;
		page-break-inside: avoid;
		word-wrap: break-word;
	}
	.vuln-perc
	{
		font-weight: bold;
		font-family: Trebuchet MS, Tahoma, sans-serif;
	}
	.infobox
	{
		padding: 4px 8px 4px 8px;
		border: 1px solid #FFF;
		margin-bottom: 5px;
		text-align: center;
		color: #999;
		width: 90px;
	}
	.infobox div.header
	{
		margin: 0px;
		font-weight: normal;
		color: #333;
	}
	.settingson, .settingsoff
	{
		font-size: 15px;
		padding: 4px 4px 4px 4px;
		border: 1px solid #CCC;
		margin-bottom: 1px;
		text-align: center;
		color: #999;
		width: 120px;
		color: #CCC;
	}
	.settingson
	{
		background-color: #FFF;
		color: #666;
	}
	.final-td
	{
		width: 190px;
	}
	/* VULNERABILITIES */.vulncount
	                     {
		                     font-size: 60px;
		                     font-family: Trebuchet MS, Tahoma, sans-serif;
	                     }
	.informational, .confirmed, .identified, .critical2
	{
		font-weight: bold;
		font-size: 12px;
		margin-top: -10px;
	}
	.critical2
	{
		color: #F00;
	}
	.informational
	{
		color: #3399FF;
	}
	.confirmed
	{
		color: #FF491C;
	}
	.identified
	{
		color: #000;
	}
	/* VULNERABILITY */.vuln-block, .vuln-block-count, .vulnerability
	                   {
		                   font-family: Trebuchet MS, Tahoma, sans-serif;
		                   font-size: 15px;
	                   }
	.vulnerability
	{
		font-size: 20px;
		color: #FFF;
		padding: 2px;
		margin-left: 2px;
	}
	.vuln-block-count
	{
		color: #666;
		text-align: right;
	}
	.vuln-block
	{
		float: right;
		width: 105px;
		padding: 20px;
	}
	.param-table
	{
		table-layout: fixed;
		width: 100%;
	}
	.param-table td
	{
		padding: 6px;
		border: 1px solid #CCC;
		word-wrap: break-word;
		vertical-align: top;
	}
	.vuln-block .block
	{
		font-size: 14px;
	}
	.vuln-block-inner-count
	{
		font-weight: normal;
		margin-top: -10px;
		margin-left: -3px;
	}

	.progress-container
	{
		border: 1px solid #ccc;
		width: 98px;
		display: block;
		margin: 0;
	}
	.progress-container div
	{
		background-color: #C00;
		height: 12px;
	}

	.vulnerable-row, vulnerable-row td, vulnerable-row tr, vulnerable-row td div
	{
		font-weight: bold;
	}
	.vc
	{
		font: 9px Consolas, Lucida Console, Courier New, Courier, monospace;
		border-left: 6px solid #CCC;
		padding-left: 10px;
		margin-left: 10px;
		display: block;
		overflow: hidden;
		word-wrap: break-word;
	}
	.vulndesc
	{
		margin-top: 15px;
	}
	.vulndesc h2
	{
		font-size: 22px;
		color: #000;
		margin-bottom: 2px;
		border: 0;
	}
	.divider
	{
		clear: both;
		height: 10px;
	}
	.activerow, .activerow td, .activerow td div
	{
		font-weight: bold;
	}
	h3.extra
	{
		color: #F60;
	}
	.customfield
	{
		border-left: 6px solid #F60;
		padding-left: 5px;
		font: 12px Consolas, Lucida Console, Courier New, Courier, monospace;
		margin-left: 10px;
		word-wrap: break-word;
	}

	.highlight
	{
		background-color: yellow;
	}

	.cprompt {
		font-size: 14px;
		background-color: #000;
		padding: 15px;
		margin-top: 5px;
		font-family: Consolas, Lucida Console, Courier New, Courier, monospace;
		color: #fff;
		width: 70%;
		word-wrap: break-word;
	    white-space: pre-wrap;
	    white-space: -moz-pre-wrap;
	    white-space: -pre-wrap;
	    white-space: -o-pre-wrap;
	}

	/* Extracted Data */
	.extracted-data {
		font-size: 14px;
		background-color: #F7F7F7;
		padding: 15px;
		margin-top: 5px;
		font-family: Consolas, Lucida Console, Courier New, Courier, monospace;
		color: #000;
		width: 70%;
		word-wrap: break-word;
	}

    h3 > span {
        margin-right:10px;
    }

    div.hexTable {
        display: block;
        text-align: center;
        border-collapse: collapse;
    }
    .hexContainer.hexTable .hexContainerCell, .hexContainer.hexTable .hexContainerHead {
        border: 1px solid #AAAAAA;
        padding: 3px 2px;
    }
    .hexContainer.hexTable .hexContainerBody .hexContainerCell {
        font: 9px Consolas, Lucida Console, Courier New, Courier, monospace;
    }
    .hexContainerCell pre {
        margin:inherit;
    }
    .hexTable .tableFootStyle {
        font-size: 14px;
    }
    .hexTable .tableFootStyle .links {
        text-align: right;
    }
    .hexTable .tableFootStyle .links a{
        display: inline-block;
        background: #1C6EA4;
        color: #FFFFFF;
        padding: 2px 8px;
        border-radius: 5px;
    }
    .hexTable.outerTableFooter {
        border-top: none;
    }
    .hexTable.outerTableFooter .tableFootStyle {
        padding: 3px 5px; 
    }
	
    .hexContainer { display: table; }
    .hexContainerRow { display: table-row-group; }
    .hexContainerHeading { display: table-header-group;}
    .hexContainerCell, .hexContainerHead { display: table-cell;}
    .hexContainerHeading { display: table-header-group;}
    .hexContainerFoot { display: table-footer-group;}
    .hexContainerBody { display: table-row-group;}
    .hexContainerSpanned { display: table-row-group;}
    .hexColspan {
        border-bottom: solid #aaaaaa 1px;
        border-right: solid #aaaaaa 1px;
        border-left: solid #aaaaaa 1px;
        text-align: center;
    }
</style>
<script type="text/javascript">
	<!--
	window.onload = function() {
		var divs = document.getElementsByTagName("div");
		for (var i = 0; i < divs.length; i++) {
			divs[i].style.overflow = divs[i].className == "vc" ? "auto" : "";
		}
	}
	// -->
</script>
</head>
<body>
	<div style="visibility: hidden; position: absolute; width: 0px; height: 0px;">
			@Raw(ReportingUtility.GetSeverityImages())
	</div>
<div style="width: 100%; min-width: 900px;">
<div style="text-align: center;">
	<span class="img-logo"></span>
</div>
<table class="section-table">
	<tr>
		<td colspan="3">
			<h1 class="allcaps">@Literals.HipaaComplianceReport_ScanReportSummary</h1>
		</td>
	</tr>
	<tr>
		<td class="board">
			<table id="dashboard-table">
				<tr>
					<td>
						<div class="tdhead">@Literals.ReportTemplate_TargetUrl</div>
					</td>
					<td class="td-right">
						<span class="dashboard-url">
									<a href="@Decode.Url(Model.ScanProfile.Uri.AbsoluteUri)" title="@Decode.Url(Model.ScanProfile.Uri.AbsoluteUri)">@dashUrl</a></span>
					</td>
				</tr>
				@if (!Model.ScanProfile.AdditionalWebsites.IsNullOrEmpty())
				{
					<tr>
						<td>
							<div class="tdhead">
								@Literals.ReportTemplate_AdditionalWebsites
							</div>
						</td>
						<td>
							@{
								foreach (var additionalWebsite in Model.ScanProfile.AdditionalWebsites)
								{
									var additionalWebsiteUri = Decode.Url(additionalWebsite.TargetUrl);
									<a href="@additionalWebsiteUri">@additionalWebsiteUri</a> @(additionalWebsite.Canonical ? Literals.ReportTemplate_CanonicalWebsite : string.Empty)<br />
								}
							}
						</td>
					</tr>
				}
				<tr>
					<td>
						<div class="tdhead">@Literals.ReportTemplate_ScanDate</div>
					</td>
					<td class="td-right">
						@startTimeInfo
					</td>
				</tr>
				<tr>
					<td>
						<div class="tdhead">@Literals.ReportTemplate_ReportDate</div>
					</td>
					<td class="td-right">
						@DateTime.Now.FormatWithTimeZone(timeFormat, TimeZoneInfo.Local)
					</td>
				</tr>
				<tr>
					<td>
						<div class="tdhead">@Literals.ReportTemplate_ScanDuration</div>
					</td>
					@{
						var elapsedDays = (ScanSettings.Instance.ElapsedTime.Days > 0) ? string.Format(Literals.ReportTemplate_ElapsedDays, ScanSettings.Instance.ElapsedTime.Days) : string.Empty;
						var elapsedTime = elapsedDays + new TimeSpan(ScanSettings.Instance.ElapsedTime.Hours, ScanSettings.Instance.ElapsedTime.Minutes, ScanSettings.Instance.ElapsedTime.Seconds);

						<td class="td-right">@elapsedTime</td>
					}
				</tr>
				<tr>
					<td>
						<div class="tdhead">
							@Literals.ReportTemplate_NetsparkerVersion
						</div>
					</td>
                    <td class="td-right">@ScanSettings.Instance.ProductVersion</td>
				</tr>
			</table>
		</td>
		<td class="board" align="right">
			<div class="infobox">
				<div class="header">@Literals.ReportTemplate_TotalRequests</div>
				@ScanSettings.Instance.RequestCount
			</div>
			<div class="infobox">
				@{
					var avgSpeed = (ScanSettings.Instance.RequestCount / ScanSettings.Instance.ElapsedTime.TotalSeconds).ToString("N2");
				}
				<div class="header">@Literals.ReportTemplate_AverageSpeed</div>
				@string.Format(Literals.ReportTemplate_AverageSpeedFormat, avgSpeed)
			</div>
		</td>
		<td class="final-td" rowspan="3" style="padding-left: 10px;">
			<div class="vulncount">
				@hipaaItemCount</div>
			<div class="identified">
				@Literals.ReportTemplate_Identified</div>
			<div class="vulncount">
				@totalConfirmed</div>
			<div class="confirmed">
				@Literals.Confirmed</div>
			<div class="vulncount">
				@severitiesCount[(int)VulnerabilitySeverity.Critical]</div>
			<div class="critical2">
				@Literals.ReportTemplate_Critical</div>
			<div class="vulncount">
				@severitiesCount[(int)VulnerabilitySeverity.Information]</div>
			<div class="informational">
				@Literals.ReportTemplate_Informational</div>
		</td>
	</tr>
	<tr>
		<td colspan="2">
			<h1 class="allcaps">Scan Explanation</h1>
		</td>
	</tr>
	<tr>
		<td class="board" colspan="2">
			<table id="settings-table">
				<tr>
					<td>
						<div class="tdhead">@Literals.ReportTemplate_ScanExplanation</div>
					</td>
					<td class="td-right">
						@Literals.HipaaComplianceReport_Explanation
						@{
							var delta = totalIdentified - hipaaItemCount;
							if (delta > 0)
							{
								<text>@string.Format(Literals.HipaaComplianceReport_ExplanationDelta, delta)</text>
							}
						}
					</td>
				</tr>
			</table>
		</td>
	</tr>
</table>
<div style="margin: auto;">
			@if(hipaaItemCount > 0) {
		<p style="font-size: 18px; color: red; text-align: center; border: 0; display: block;">@string.Format(Literals.HipaaComplianceReport_NumberOfVulnerabilitiesFound, hipaaItemCount, hipaaItemCount == 1 ? Literals.ReportTemplate_VulnerabilitySingular : Literals.ReportTemplate_VulnerabilityPlural)</p>
			} else { 
		var extraInfo = string.Empty;
				if(totalIdentified > 0) { extraInfo = string.Format(Literals.HipaaComplianceReport_VulnerabilitiesIdentifiedNotClassified, totalIdentified); }
		<p style="font-size: 18px; color: green; text-align: center; border: 0; display: block;">@Literals.HipaaComplianceReport_NoVulnerabilitiesFound @extraInfo</p>
	}
</div>
<br/>
@if (hipaaItemCount > 0)
{
    <table>
        <tr>
            <td>
                <h1 class="allcaps">@Literals.ReportTemplate_Vulnerabilities</h1>
            </td>
        </tr>
        <tr>
            <td>

                @{
                    var severityGroup = hipaaVulnList.GroupBy(x => x.Severity)
                        .Select(x => new
                        {
                            x.Key,
                            Count = x.Select(y => y.Title).Distinct().Count()
                        })
                        .ToDictionary(x => x.Key, x => x.Count);

                    var confirmTotal = 0;
                }
                <table class="summary-table">
                    <thead>
                    <tr>
                        <th></th>
                        <th class="allcaps">@Literals.ReportTemplate_Issues</th>
                        <th class="allcaps">@Literals.ReportTemplate_Instances</th>
                        <th class="allcaps">@Literals.Confirmed</th>
                    </tr>
                    </thead>
                    @{
                        var severities = Enum.GetValues(typeof(VulnerabilitySeverity));
                        Array.Reverse(severities);
                        foreach (VulnerabilitySeverity severity in severities)
                        {
                            <tr>
                                <td>
                                    <div style="display: flex">
                                        <svg class="flex-svg"><use xmlns:xlink="http://www.w3.org/1999/xlink" href="#Svg-@severity.ToString()"></use></svg>
                                        @ReportingUtility.GetLocalizedSeverity(severity).ToUpperInvariant()
                                    </div>
                                </td>
                                <td>
                                    @if (severityGroup.ContainsKey(severity))
                                    {
                                        @severityGroup[severity]
                                    }
                                    else
                                    {
                                        @Encode("0")
                                    }
                                </td>
                                <td>
                                    @hipaaVulnList.Where(_ => _.Severity == severity).Count()
                                </td>
                                <td>
                                    @{
                                        var confirmRow = hipaaVulnList.Count(_ => _.Severity == severity && _.IsConfirmed);
                                        confirmTotal += confirmRow;
                                    }
                                    @confirmRow
                                </td>
                            </tr>
                        }
                    }
                    <tfoot>
                    <tr>
                        <th>
                            @Literals.ReportTemplate_Total
                        </th>
                        <th>
                            @severityGroup.Values.Sum()
                        </th>
                        <th>
                            @hipaaItemCount
                        </th>
                        <th>
                            @Model.Vulnerabilities.Count(_ => _.Classification != null && !string.IsNullOrEmpty(_.Classification.HipaaText()) && _.IsConfirmed)
                        </th>
                    </tr>
                    </tfoot>
                </table>

            </td>
        </tr>
    </table>

    <br>
    <br>

    <!-- Vulnerability Details -->
	VulnerabilityType? lastType = null;

	// Sort vulnerabilities based on their severity, Type, confirmation and certainty
	var sortedVulns = from IVulnerabilityView v in hipaaVulnList
	    where !v.IsVariation
	    orderby v.Severity descending, v.Order ascending, v.Type ascending, v.IsConfirmed descending, v.Certainty descending, v.AbsoluteUri
		select v;

	var vulnIndex = 0;
	var vulnSubIndex = 0;

	foreach (var vuln in sortedVulns)
	{
		if (lastType != vuln.Type)
		{
			// New vulnerability group
			lastType = vuln.Type;
			vulnSubIndex = 0;

		    var sameTypedVulnList = hipaaVulnList.Where(v => v.Type == vuln.Type).ToList();
		    var totalCount = sameTypedVulnList.Where(v => !v.IsVariation).Count() + sameTypedVulnList.SelectMany(v => v.Variations).Count();
		    var confCount = sameTypedVulnList.Count(v => v.IsConfirmed);
		    var nonConfCount = sameTypedVulnList.Count(v => !v.IsConfirmed);

			<a name="@vuln.Type.ToString()"></a>
			<h1 style="page-break-before: always;">@string.Format("{0}. {1}", ++vulnIndex, vuln.Title)</h1>

			<div class="vuln-block">
				<div class="vuln-block-count allcaps">
					@(totalCount)
					@Literals.ReportTemplate_Total</div>
				<div class="block @vuln.Severity.ToString().ToLowerInvariant()" style="font-weight: bold;">
					@ReportingUtility.GetLocalizedSeverity(vuln.Severity).ToUpperInvariant()
				</div>
				@if (confCount > 0)
				{
					<div class="block @("blockconfirmed" + vuln.Severity.ToString().ToLowerInvariant())">
						<div style="margin-bottom: 10px;" class="allcaps">@Literals.Confirmed</div>
						<div style="font-size: 35px" class="vuln-block-inner-count">@confCount</div>
					</div>
				}
			</div>

			@vuln.RenderCustomData()

			<div class="vulndesc" style="margin-bottom: 50px;">
				@vuln.GetTemplate(Model.ReportPolicy.DatabasePath)
				@if (vuln.VersionVulnerabilities.Any())
				{
					<h2>@Literals.ReportTemplate_KnownVulnerabilitiesInThisVersion</h2>
					foreach (var implied in vuln.VersionVulnerabilities)
					{
						<div style="page-break-inside: avoid;"> @* Container div to prevent PDF page breaking *@
							<h3>
								<svg><use xmlns:xlink="http://www.w3.org/1999/xlink" href="#Svg-@implied.Severity.ToString()"></use></svg>
								@implied.Title
							</h3>
							<p>@implied.Overview</p>

							@{
								var referenceLinks = VulnerabilityTemplateManager.ConvertLinks(implied.References);
							    var bduLinks = VulnerabilityTemplateManager.GetLinksFromBdu(implied.Bdu);
							    if (!string.IsNullOrEmpty(referenceLinks))
							    {
							        <h4>@Literals.ReportTemplate_ExternalReferences</h4>
							        <ul>
							            @foreach (var link in referenceLinks.Split(Chars.Comma).Concat(bduLinks))
							            {
							                <li>@Raw(link)</li>
							            }
							        </ul>
							    }
							}
							@{
								var exploitText = VulnerabilityTemplateManager.ConvertLinks(implied.Exploit);
								if (!string.IsNullOrEmpty(exploitText))
								{
									<h4>@Literals.Exploit</h4>
									<ul>
										@foreach (var link in exploitText.Split(Chars.Comma))
										{
											<li>@Raw(link)</li>
										}
									</ul>
								}
							}
						</div>
					}
				}

				@if (vuln.Classification != null)
				{
					<h2>@Literals.Classification</h2>
					<div>
						@VulnerabilityTemplateManager.GetClassificationHtml(vuln.Classification.HipaaText(), vuln.Classification.HipaaLink())
						@if (!CvssVectorStringParser.IsVectorStringEmpty(vuln.CvssVectorString))
						{
							<h2>CVSS 3.0</h2>
							<span>@Literals.CvssVectorString: @vuln.CvssVectorString</span>
							@VulnerabilityTemplateManager.GetCvssScoreHtml("Base", cvssScores[vuln.Type].BaseScore)
							@VulnerabilityTemplateManager.GetCvssScoreHtml("Temporal", cvssScores[vuln.Type].TemporalScore)
							@VulnerabilityTemplateManager.GetCvssScoreHtml("Environmental", cvssScores[vuln.Type].EnvironmentalScore)
						}
					</div>
				}
			</div>
		}

	    foreach (var variation in ReportingUtility.GetReportableVulnerabilities(vuln, Model))
	    {
	        <div>
	            <div style="page-break-inside: avoid; margin-top: 16px; word-wrap: break-word;"> @* Container div to prevent PDF page breaking *@
	                <h2 class="left-border" style="display: inline;"><a name="@variation.Type@variation.AbsoluteUri">@string.Format("{0}.{1}. {2}", vulnIndex, ++vulnSubIndex, variation.AbsoluteUri)</a></h2>
	                @if (variation.IsConfirmed)
	                {
	                    <span class="vulnerability @("blockconfirmed" + variation.Severity.ToString().ToLowerInvariant())" style="padding-bottom: 5px;">@Literals.Confirmed</span>
	                }
	                <div class="vuln-table-bottom">
	                </div>
	                <div>
	                    <a href="@Decode.Url(Model.ScanProfile.Uri.AbsoluteUri)" target="_blank">
	                        @MSL.Core.Interface.TextUtils.GetShorterText(variation.AbsoluteUri, 100)</a>
	                </div>
	                @* Only show parameters if it's actively identified *@
	                @if (variation.HasVisibleAttackParameter && variation.Parameters.Any())
	                {
	                    <h3>@Literals.ReportTemplate_Parameters</h3>
	                    <table class="param-table">
	                        <col style="width: 40%">
	                        <col style="width: 10%">
	                        <col style="width: 50%">
	                        <tr class="vulnerable-row">
	                            <td>@Literals.ReportTemplate_Parameter</td>
	                            <td>@Literals.ReportTemplate_Type</td>
	                            <td>@Literals.ReportTemplate_Value</td>
	                        </tr>
	                        @foreach (var param in variation.Parameters)
	                        {
	                            var activeClass = (param.KeyName == variation.AttackParameterKeyName) ? "activerow" : "";
	                            <tr class="@activeClass">
	                                <td>
	                                    @param.Name
	                                </td>
	                                <td>
	                                    @param.TypeName
	                                </td>
	                                <td>
	                                    @MSL.Core.Interface.TextUtils.GetShorterText(Decode.Url(param.Value), 100)
	                                </td>
	                            </tr>
	                        }
	                    </table>
	                }
	            </div> @* Container div to prevent PDF page breaking *@
	            @foreach (var field in variation.CustomFields)
	            {
	                <h3 class="extra">@ReportingUtility.GetLocalizedCustomFieldName(field.Key)</h3>
	                if (field.Value.HasMultipleValues)
	                {
	                    <ul>
	                        @foreach (var value in field.Value.Values)
	                        {
	                            <li>@value</li>
	                        }
	                    </ul>
	                }
	                else
	                {
	                    <div class="customfield">
                            @if (field.Key == "XssProofUrl" || field.Key == Literals.XssProofUrl)
                            {
                                <a href="@field.Value.Value">@field.Value.Value</a>
                            }
                            else
                            {
                                @ReportingUtility.GetLocalizedValueWithFormatParameter(field.Value.Value, field.Value.FormatParameter)
                            }


	                        @{
	                            var severityMessage = variation.GetVersionSeverityMessage(field.Key);

	                            if (!string.IsNullOrWhiteSpace(severityMessage))
	                            {
	                                <text>@severityMessage</text>
	                            }
	                        }
	                    </div>
	                }
	            }

	            @if (!variation.IsConfirmed)
	            {
	                <h3>@Literals.Certainty</h3>
	                <div class="progress-container">
	                    <div style="width: @(variation.Certainty + "%")">
	                    </div>
	                </div>
	            }
	            <div style="page-break-inside: avoid;"> @*Container div to prevent PDF page breaking *@
	                @{
	                    var requestOutput = MSL.Core.Interface.TextUtils.GetShorterText(variation.GetRequestAsHtml(), SourceMaxLength);
	                    var responseOutput = variation.GetResponseAsHtml(ResponseThreshold, ResponseHighlightLimit, SourceMaxLength);
	                    var injectionRequestOutput = MSL.Core.Interface.TextUtils.GetShorterText(variation.GetInjectionRequestOutput(), SourceMaxLength);
	                    var injectionResponseOutput = MSL.Core.Interface.TextUtils.GetShorterText(variation.GetInjectionResponseOutput(), SourceMaxLength);

	                    if (!string.IsNullOrEmpty(injectionRequestOutput.ToString()))
	                    {
	                        <h3>@Literals.ReportTemplate_InjectionRequest</h3>
	                        <div class="vc">@injectionRequestOutput</div>
	                        <h4>@Literals.ReportTemplate_IdentificationRequest</h4>
	                    }
	                    else
	                    {
	                        <h3>@Literals.Request</h3>
	                    }
	                    <div class="vc">@requestOutput</div>
	                }
	            </div>
	            <div style="page-break-inside: avoid;"> @* Container div to prevent PDF page breaking *@
	                @if (!string.IsNullOrEmpty(injectionResponseOutput.ToString()))
	                {
	                    <h3>@Literals.ReportTemplate_InjectionResponse</h3>
	                    <div class="vc">@injectionResponseOutput</div>
	                    <h3>@Literals.ReportTemplate_IdentificationResponse</h3>
	                }
	                else
	                {
	                    <h3>@Literals.Response</h3>
	                }
	                <div class="vc">@responseOutput</div>
	            </div>
	        </div>
	        <div class="divider">
	        </div>
	    }
	}
}
</div>
</body>
</html>