@using System
@using MSL.Core.Entities.Vulnerability;
@using MSL.Core.Interface
@using MSL.Core.Process.Parsing
@using MSL.Core.Utilities

@{
	Vulnerability vuln = Model.Vulnerability;
	var uri = Utils.HtmlEncode(vuln.UriManager.Uri.AbsoluteUri);

	var formData = vuln.CustomData.Value as Form;
	var action = formData != null ? formData.Action : null;

	if (!string.IsNullOrEmpty(action))
	{
		Uri actionUri;
		if (Uri.TryCreate(action, UriKind.RelativeOrAbsolute, out actionUri))
		{
			var newUri = actionUri.IsAbsoluteUri ? actionUri : new Uri(vuln.UriManager.Uri, actionUri);
			uri = Utils.HtmlEncode(newUri.AbsoluteUri);
		}
	}
}

@if (formData != null)
{
    <form style="display:none" action="@(uri)" method="@(formData.Method.ToString().ToUpperInvariant())" @(formData.IsMultipart ? @"enctype='multipart/form-data'" : string.Empty)>
        @foreach (Input input in formData.Inputs)
        {
            var value = Utils.HtmlEncode(input.Value); 
            <input type="text" name="@input.Name" value="@value"/>
        }
    </form>
    <script> HTMLFormElement.prototype.submit.call(document.forms[0]);</script>
}