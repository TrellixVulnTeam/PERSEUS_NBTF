@using System
@using System.Linq;
@using MSL.Core.Entities
@using MSL.Core.Entities.Vulnerability;
@using MSL.Core.Utilities

@{
	Vulnerability vuln = Model.Vulnerability;
    var uriManager = vuln.Responses.Count > 0 ? vuln.Responses[0].UriManager : vuln.UriManager;
    var uri = uriManager.Uri.AbsoluteUri;
    if (uriManager.AttackParameter.Type == ParameterType.FullQueryString)
    {
        uri = uriManager.Uri.GetLeftPart(UriPartial.Path) + "?" + uriManager.Uri.GetComponents(UriComponents.Query, UriFormat.Unescaped);
    }
    uri = Utils.HtmlEncode(VulnerabilityTemplateManager.MakeXssExploitable(uri));
}
@if(@uriManager.HttpMethod == "POST"){
    <form style="display:none" action="@uri" method="POST"@(uriManager.IsUploadRequest ? @"enctype='multipart/form-data'" : "")>
    @foreach (Parameter param in uriManager.Parameters.Where(x => x.Type == ParameterType.Post))
    {
        var xssExploitableValue = VulnerabilityTemplateManager.MakeXssExploitable(param.Value);
        var value = param.IsEncoded ? xssExploitableValue : Utils.HtmlEncode(xssExploitableValue);

        <textarea name="@param.Name">@Raw(value)</textarea>
    }
    </form>
    <script> HTMLFormElement.prototype.submit.call(document.forms[0]);</script>	
}else{
    <a style="display:none" href="@Raw(uri)">Click here</a>
    <script>document.links[0].click();</script>
}